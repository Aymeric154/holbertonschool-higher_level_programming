import unittest
from matrix_divided import matrix_divided

class TestMatrixDivided(unittest.TestCase):
    """Classe de test pour la fonction matrix_divided"""

    def test_normal_division(self):
        """Test de division normale"""
        matrix = [[1, 2, 3], [4, 5, 6]]
        self.assertEqual(matrix_divided(matrix, 3), [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]])

    def test_float_division(self):
        """Test avec des nombres flottants"""
        matrix = [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]]
        self.assertEqual(matrix_divided(matrix, 2), [[0.55, 1.1, 1.65], [2.2, 2.75, 3.3]])

    def test_mixed_numbers(self):
        """Test avec des entiers et des flottants mélangés"""
        matrix = [[1, 2.5, 3], [4.5, 5, 6.5]]
        self.assertEqual(matrix_divided(matrix, 2), [[0.5, 1.25, 1.5], [2.25, 2.5, 3.25]])

    def test_negative_numbers(self):
        """Test avec des nombres négatifs"""
        matrix = [[-1, -2, -3], [-4, -5, -6]]
        self.assertEqual(matrix_divided(matrix, -2), [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]])

    def test_division_by_negative(self):
        """Test de division par un nombre négatif"""
        matrix = [[1, 2, 3], [4, 5, 6]]
        self.assertEqual(matrix_divided(matrix, -2), [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]])

    def test_empty_matrix(self):
        """Test avec une matrice vide"""
        with self.assertRaises(TypeError):
            matrix_divided([], 2)

    def test_invalid_matrix_type(self):
        """Test avec une matrice de type invalide"""
        with self.assertRaises(TypeError):
            matrix_divided("not a matrix", 2)

    def test_invalid_row_type(self):
        """Test avec une ligne de type invalide"""
        with self.assertRaises(TypeError):
            matrix_divided([[1, 2, 3], "not a row"], 2)

    def test_invalid_element_type(self):
        """Test avec un élément de type invalide"""
        with self.assertRaises(TypeError):
            matrix_divided([[1, 2, 3], [4, "5", 6]], 2)

    def test_uneven_rows(self):
        """Test avec des lignes de tailles différentes"""
        with self.assertRaises(TypeError):
            matrix_divided([[1, 2, 3], [4, 5]], 2)

    def test_invalid_divisor_type(self):
        """Test avec un diviseur de type invalide"""
        with self.assertRaises(TypeError):
            matrix_divided([[1, 2], [3, 4]], "2")

    def test_division_by_zero(self):
        """Test de division par zéro"""
        with self.assertRaises(ZeroDivisionError):
            matrix_divided([[1, 2], [3, 4]], 0)

if __name__ == '__main__':
    unittest.main()