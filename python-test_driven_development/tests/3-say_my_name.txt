The ``3-say_my_name`` module
============================

Using ``say_my_name``
---------------------

Import the function:

    >>> say_my_name = __import__('3-say_my_name').say_my_name

Test with first name and last name:
    >>> say_my_name("John", "Smith")
    My name is John Smith

Test with only first name:
    >>> say_my_name("Bob")
    My name is Bob 

Test with empty strings:
    >>> say_my_name("", "")
    My name is  

Test with non-string first name:
    >>> say_my_name(12, "White")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

Test with non-string last name:
    >>> say_my_name("John", 12)
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

Test with no arguments:
    >>> say_my_name()
    Traceback (most recent call last):
    ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

Test with None as first name:
    >>> say_my_name(None)
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

Test with special characters:
    >>> say_my_name("Jöhn", "Smîth")
    My name is Jöhn Smîth

Test with very long names:
    >>> say_my_name("Pneumonoultramicroscopicsilicovolcanoconiosis", "Hippopotomonstrosesquippedaliophobia")
    My name is Pneumonoultramicroscopicsilicovolcanoconiosis Hippopotomonstrosesquippedaliophobia

Test with numbers as strings:
    >>> say_my_name("007", "42")
    My name is 007 42

Test with whitespace:
    >>> say_my_name("   John   ", "   Doe   ")
    My name is    John      Doe   

Test with newline characters:
    >>> say_my_name("John\n", "Doe\n")
    My name is John
     Doe
    

Test with non-printable characters:
    >>> say_my_name("John\t", "Doe\r")
    My name is John	 Doe

Test with empty first name:
    >>> say_my_name("", "Doe")
    My name is  Doe

Test with None as last name:
    >>> say_my_name("John", None)
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string
