#!/usr/bin/python3

# File: test_1_my_list.py

import unittest
from io import StringIO
import sys
from 1-my_list import MyList

class TestMyList(unittest.TestCase):
    """Test cases for the MyList class."""

    def test_print_sorted_empty_list(self):
        """Test print_sorted with an empty list."""
        my_list = MyList()
        captured_output = StringIO()
        sys.stdout = captured_output
        my_list.print_sorted()
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue().strip(), "[]")

    def test_print_sorted_sorted_list(self):
        """Test print_sorted with an already sorted list."""
        my_list = MyList([1, 2, 3, 4, 5])
        captured_output = StringIO()
        sys.stdout = captured_output
        my_list.print_sorted()
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue().strip(), "[1, 2, 3, 4, 5]")

    def test_print_sorted_unsorted_list(self):
        """Test print_sorted with an unsorted list."""
        my_list = MyList([1, 4, 2, 3, 5])
        captured_output = StringIO()
        sys.stdout = captured_output
        my_list.print_sorted()
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue().strip(), "[1, 2, 3, 4, 5]")

    def test_print_sorted_negative_numbers(self):
        """Test print_sorted with negative numbers."""
        my_list = MyList([-5, -1, -3, -2, -4])
        captured_output = StringIO()
        sys.stdout = captured_output
        my_list.print_sorted()
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue().strip(), "[-5, -4, -3, -2, -1]")

    def test_print_sorted_mixed_numbers(self):
        """Test print_sorted with mixed positive and negative numbers."""
        my_list = MyList([-5, 1, -3, 2, 0, -4])
        captured_output = StringIO()
        sys.stdout = captured_output
        my_list.print_sorted()
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue().strip(), "[-5, -4, -3, 0, 1, 2]")

    def test_original_list_unchanged(self):
        """Test that the original list remains unchanged after print_sorted."""
        my_list = MyList([3, 1, 2])
        original = my_list.copy()
        my_list.print_sorted()
        self.assertEqual(my_list, original)

if __name__ == '__main__':
    unittest.main()